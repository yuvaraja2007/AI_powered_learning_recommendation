import { Download, Share2, FileText, Copy, CheckCircle } from 'lucide-react';
import { useState } from 'react';
import { Recommendation, RecommendationMetrics } from '../types/learning';

interface ExportPanelProps {
  recommendations: Recommendation[];
  metrics: RecommendationMetrics;
  studentName: string;
  algorithmType: string;
}

export default function ExportPanel({
  recommendations,
  metrics,
  studentName,
  algorithmType
}: ExportPanelProps) {
  const [copied, setCopied] = useState(false);

  const generateReport = () => {
    const report = `
AI-POWERED LEARNING RECOMMENDATIONS REPORT
==========================================

Student: ${studentName}
Algorithm: ${algorithmType}
Generated: ${new Date().toLocaleDateString()}

PERFORMANCE METRICS
-------------------
Accuracy:   ${(metrics.accuracy * 100).toFixed(0)}%
Precision:  ${(metrics.precision * 100).toFixed(0)}%
Recall:     ${(metrics.recall * 100).toFixed(0)}%
Coverage:   ${(metrics.coverage * 100).toFixed(0)}%
Diversity:  ${(metrics.diversity * 100).toFixed(0)}%

RECOMMENDED COURSES
-------------------
${recommendations.map((rec, i) => `
${i + 1}. ${rec.course.title}
   Category: ${rec.course.category}
   Level: ${rec.course.difficultyLevel}
   Duration: ${rec.course.durationMinutes} minutes
   Match Score: ${(rec.score * 100).toFixed(0)}%
   Reason: ${rec.reasoning}
`).join('\n')}

This report was generated by an AI-powered learning recommendation system
using ${algorithmType.toLowerCase()} analysis.
`;
    return report;
  };

  const downloadReport = () => {
    const report = generateReport();
    const blob = new Blob([report], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `learning-recommendations-${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const copyToClipboard = () => {
    const report = generateReport();
    navigator.clipboard.writeText(report);
    setCopied(true);
    setTimeout(() => setCopied(false), 2000);
  };

  const downloadJSON = () => {
    const data = {
      student: studentName,
      algorithm: algorithmType,
      timestamp: new Date().toISOString(),
      metrics,
      recommendations: recommendations.map(rec => ({
        course: rec.course.title,
        category: rec.course.category,
        difficulty: rec.course.difficultyLevel,
        matchScore: rec.score,
        reasoning: rec.reasoning
      }))
    };

    const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `learning-recommendations-${Date.now()}.json`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="bg-gradient-to-br from-slate-50 to-blue-50 rounded-2xl shadow-lg p-6 border border-gray-200">
      <div className="flex items-center gap-3 mb-6">
        <div className="bg-gradient-to-r from-blue-600 to-cyan-600 p-2 rounded-lg">
          <Share2 className="w-5 h-5 text-white" />
        </div>
        <h3 className="text-lg font-semibold text-gray-900">Export & Share</h3>
      </div>

      <p className="text-sm text-gray-600 mb-6">
        Save your personalized recommendations for future reference or share them with mentors
      </p>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        <button
          onClick={downloadReport}
          className="flex items-center gap-3 px-5 py-4 bg-white border-2 border-gray-200 rounded-xl hover:border-blue-500 hover:bg-blue-50 transition-all group"
        >
          <div className="bg-blue-100 p-2 rounded-lg group-hover:bg-blue-200 transition-colors">
            <FileText className="w-5 h-5 text-blue-600" />
          </div>
          <div className="text-left">
            <div className="font-semibold text-gray-900 text-sm">Text Report</div>
            <div className="text-xs text-gray-500">Download as .txt</div>
          </div>
        </button>

        <button
          onClick={downloadJSON}
          className="flex items-center gap-3 px-5 py-4 bg-white border-2 border-gray-200 rounded-xl hover:border-purple-500 hover:bg-purple-50 transition-all group"
        >
          <div className="bg-purple-100 p-2 rounded-lg group-hover:bg-purple-200 transition-colors">
            <Download className="w-5 h-5 text-purple-600" />
          </div>
          <div className="text-left">
            <div className="font-semibold text-gray-900 text-sm">JSON Data</div>
            <div className="text-xs text-gray-500">Download as .json</div>
          </div>
        </button>

        <button
          onClick={copyToClipboard}
          className="flex items-center gap-3 px-5 py-4 bg-white border-2 border-gray-200 rounded-xl hover:border-emerald-500 hover:bg-emerald-50 transition-all group md:col-span-2"
        >
          <div className="bg-emerald-100 p-2 rounded-lg group-hover:bg-emerald-200 transition-colors">
            {copied ? (
              <CheckCircle className="w-5 h-5 text-emerald-600" />
            ) : (
              <Copy className="w-5 h-5 text-emerald-600" />
            )}
          </div>
          <div className="text-left">
            <div className="font-semibold text-gray-900 text-sm">
              {copied ? 'Copied to Clipboard!' : 'Copy to Clipboard'}
            </div>
            <div className="text-xs text-gray-500">
              {copied ? 'Ready to paste anywhere' : 'Quick copy for sharing'}
            </div>
          </div>
        </button>
      </div>

      <div className="mt-6 p-4 bg-white rounded-lg border border-blue-200">
        <p className="text-xs text-gray-600 leading-relaxed">
          <span className="font-semibold text-blue-600">Hackathon Tip:</span> These exports include
          detailed metrics and reasoning for each recommendation, perfect for demonstrating your
          AI system's transparency and explainability to judges.
        </p>
      </div>
    </div>
  );
}
